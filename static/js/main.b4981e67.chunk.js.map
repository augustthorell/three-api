{"version":3,"sources":["assets/dancing.glb","model.js","App.js","index.js"],"names":["Model","props","mixer","model","useLoader","GLTFLoader","mod","animations","length","THREE","scene","forEach","clip","clipAction","play","useFrame","state","delta","update","traverse","child","isMesh","castShadow","receiveShadow","material","side","object","scale","position","extend","OrbitControls","Text","Controls","orbitRef","useRef","useThree","camera","gl","current","maxPolarAngle","Math","PI","minPolarAngle","args","domElement","ref","Plane","rotation","attach","color","Title","textOptions","font","parse","JSONfont","size","height","Weather","weather","useState","fontSize","maxWidth","lineHeight","letterSpacing","textAlign","materialType","opts","text","degree","type","anchorX","anchorY","SL","travel","LegList","Leg","Origin","name","time","Destination","Button","test","title","meshRef","hovered","setHovered","active","setActive","useSpring","mesh","onPointerOver","onPointerOut","onClick","setTimeout","meshPhysicalMaterial","ModelComponent","surprise","App","setWeather","setTravel","setSurprise","onCreated","shadowMap","enabled","intensity","penumbra","fallback","Axios","get","then","response","data","temperature","description","process","Trip","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4981e67.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/dancing.da19c707.glb\";","import { useLoader, useFrame } from 'react-three-fiber';\nimport {\n    GLTFLoader\n} from 'three/examples/jsm/loaders/GLTFLoader';\nimport * as THREE from 'three'\nimport mod from './assets/dancing.glb'\n\nconst Model = props => {\n    const model = useLoader(\n        GLTFLoader,\n        mod\n    )\n\n    let mixer\n    if (model.animations.length) {\n        mixer = new THREE.AnimationMixer(model.scene);\n        model.animations.forEach(clip => {\n            const action = mixer.clipAction(clip)\n            action.play();\n        });\n    }\n\n    useFrame((state, delta) => {\n        mixer?.update(delta)\n    })\n\n    model.scene.traverse(child => {\n        if (child.isMesh) {\n            child.castShadow = true\n            child.receiveShadow = true\n            child.material.side = THREE.FrontSide\n        }\n    })\n\n    return (\n        <primitive\n            object={model.scene}\n            scale={50}\n            position={[30, 0, 10]}\n        />\n    )\n}\n\nexport default Model;","import React, { useState, useRef, Suspense } from 'react'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { Canvas, extend, useFrame, useThree } from 'react-three-fiber'\nimport { useSpring, a } from 'react-spring/three'\nimport './style.css'\nimport * as THREE from 'three'\nimport JSONfont from \"./fonts/Cascadia_Code.json\";\nimport { Text } from \"troika-three-text\";\nimport Model from './model'\nimport Axios from 'axios'\n\n\nextend({ OrbitControls, Text });\n\nconst Controls = () => {\n    const orbitRef = useRef();\n    const { camera, gl } = useThree();\n\n\n    useFrame(() => {\n        orbitRef.current.update()\n    })\n    return (\n        <orbitControls\n\n            maxPolarAngle={Math.PI / 4} // Change viewing angle here\n            minPolarAngle={Math.PI / 4} // And here\n            args={[camera, gl.domElement]}\n            ref={orbitRef}\n\n        />\n    )\n}\n\nconst Plane = () => (\n    <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, -0.5, 0]} receiveShadow>\n        <planeBufferGeometry\n            attach='geometry'\n            args={[10000, 10000]}\n\n        />\n        <meshPhysicalMaterial attach='material' color='red' />\n    </mesh>\n)\n\nconst Title = () => {\n    const font = new THREE.FontLoader().parse(JSONfont);\n\n    // configure font geometry\n    const textOptions = {\n        font,\n        size: 20,\n        height: 5\n    };\n\n    return (\n        <mesh\n            rotation={[-Math.PI / 2, 0, 0]}\n            position={[-180, 0, -95]}\n            castShadow\n        >\n            <textGeometry attach='geometry' args={['Current Weather In Stockholm', textOptions]} />\n            <meshStandardMaterial attach='material' />\n        </mesh>\n\n    )\n}\nconst Weather = ({ weather, position }) => {\n    const font = new THREE.FontLoader().parse(JSONfont);\n    const [opts, setOpts] = useState({\n        font: font,\n        fontSize: 12,\n        color: \"#99ccff\",\n        maxWidth: 100,\n        lineHeight: 1,\n        letterSpacing: 0,\n        textAlign: \"left\",\n        materialType: \"MeshPhongMaterial\"\n    });\n\n    return (\n        <mesh\n            rotation={[-Math.PI / 2, 0, 0]}\n            position={position}\n        >\n            <text\n                {...opts}\n                text={weather.degree ? weather.degree + ' and ' + weather.type : ''}\n                font={font}\n                anchorX=\"center\"\n                anchorY=\"middle\"\n            >\n                {opts.materialType === \"MeshPhongMaterial\" ? (\n                    <meshPhongMaterial attach=\"material\" color={opts.color} />\n                ) : null}\n            </text>\n        </mesh >\n    )\n}\n\nconst SL = ({ travel, position }) => {\n    const font = new THREE.FontLoader().parse(JSONfont);\n    const [opts, setOpts] = useState({\n        font: font,\n        fontSize: 12,\n        color: \"#99ccff\",\n        maxWidth: 250,\n        lineHeight: 1,\n        letterSpacing: 0,\n        textAlign: \"left\",\n        materialType: \"MeshPhongMaterial\"\n    });\n\n    return (\n        <group position={position} rotation={[-Math.PI / 2, 0, 0]}>\n            <mesh>\n                <text\n                    {...opts}\n                    text={travel[0] ? 'Next Departure from Sickla to Medborgarplatsen is: ' : ''}\n                    font={font}\n                    anchorX=\"center\"\n                    anchorY=\"middle\"\n                >\n                    {opts.materialType === \"MeshPhongMaterial\" ? (\n                        <meshPhongMaterial attach=\"material\" color={opts.color} />\n                    ) : null}\n                </text>\n            </mesh>\n            <mesh position={[-28, -30, 2]}>\n                <text\n                    {...opts}\n                    text={travel[0] ? travel[0].LegList.Leg[0].Origin.name + ' at ' + travel[0].LegList.Leg[0].Origin.time : ''}\n                    font={font}\n                    anchorX=\"center\"\n                    anchorY=\"middle\"\n                >\n                    {opts.materialType === \"MeshPhongMaterial\" ? (\n                        <meshPhongMaterial attach=\"material\" color={opts.color} />\n                    ) : null}\n                </text>\n                <text\n                    position={[6, -15, 0]}\n                    {...opts}\n                    text={travel[0] ? 'to ' + travel[0].LegList.Leg[0].Destination.name : ''}\n                    font={font}\n                    anchorX=\"center\"\n                    anchorY=\"middle\"\n                >\n                    {opts.materialType === \"MeshPhongMaterial\" ? (\n                        <meshPhongMaterial attach=\"material\" color={opts.color} />\n                    ) : null}\n                </text>\n            </mesh>\n        </group>\n    )\n}\n\n\n\n\nconst Button = ({ test, position, title }) => {\n\n    const meshRef = useRef();\n    const [hovered, setHovered] = useState(false);\n    const [active, setActive] = useState(false);\n    const font = new THREE.FontLoader().parse(JSONfont);\n\n    // configure font geometry\n    const textOptions = {\n        font,\n        size: 5,\n        height: 5\n    };\n    const props = useSpring({\n        scale: active ? [120, 15, 1] : [120, 15, 30],\n        color: hovered ? 'hotpink' : 'blue',\n    })\n    const text = useSpring({\n        scale: active ? [1, 1, 0.1] : [1, 1, 3],\n\n    })\n\n\n    function click() { setTimeout((() => setActive(false)), 400); }\n    return (\n        <group position={position}>\n            <a.mesh\n                ref={meshRef}\n                onPointerOver={() => setHovered(true)}\n                onPointerOut={() => setHovered(false)}\n                castShadow\n                onClick={() => {\n                    setActive(!active)\n                    click();\n                    test();\n                }}\n                scale={props.scale}\n                rotation={[-Math.PI / 2, 0, 0]}\n                receiveShadow\n\n            >\n                <boxBufferGeometry\n                    attach='geometry'\n                    args={[1, 1, 1]}\n                />\n                <a.meshPhysicalMaterial attach='material' color={props.color} />\n\n            </a.mesh>\n            <a.mesh\n                rotation={[-Math.PI / 2, 0, 0]}\n                position={[-55, 1, 2]}\n                castShadow\n                scale={text.scale}\n            >\n                <textGeometry attach='geometry' args={[title, textOptions]} castShadow />\n                <meshStandardMaterial attach='material' />\n            </a.mesh>\n        </group>\n    )\n}\n\nconst ModelComponent = ({ surprise }) => {\n    if (surprise === true) {\n        return (\n            <Model />\n        )\n    } else {\n        return null\n    }\n}\n\nconst App = () => {\n    const [weather, setWeather] = useState({\n        degree: '',\n        type: '',\n    })\n\n    const [travel, setTravel] = useState([])\n    const [surprise, setSurprise] = useState(false)\n\n\n    const weatherFetch = () => {\n        Axios.get(`https://goweather.herokuapp.com/weather/Stockholm`).then((response) => {\n            setWeather({ degree: response.data.temperature, type: response.data.description })\n        })\n    }\n\n    const travelFetch = () => {\n        const apiKey = process.env.REACT_APP_APIKEY\n        Axios.get(`https://api.resrobot.se/v2/trip?key=${apiKey}&originId=740024807&destId=740021654&format=json&type=JNY&WALK=0&originWalk=0&destWalk=0`).then((response) => {\n            setTravel(response.data.Trip)\n        })\n    }\n    const surpriseClick = () => {\n        setSurprise(!surprise)\n    }\n\n    return (\n        <Canvas\n            camera={{ position: [-20, 30, 400] }}\n            onCreated={({ gl }) => {\n                gl.shadowMap.enabled = true\n                gl.shadowMap.type = THREE.PCFSoftShadowMap\n            }}\n        >\n            <ambientLight intensity={0.4} />\n            <spotLight position={[150, 200, 100]} penumbra={1} castShadow />\n            <fog attach=\"fog\" args={[\"black\", 100, 800]} />\n            <Controls />\n            <Plane />\n            <Title />\n\n            <Weather weather={weather} position={[180, 0.5, 2]} />\n            <SL travel={travel} position={[-120, 0.5, 2]} />\n\n            <Suspense fallback='null'>\n                <ModelComponent surprise={surprise} />\n            </Suspense>\n            <Button test={weatherFetch} title={'Click to get weather report'} position={[30, 0, 100]} />\n            <Button test={travelFetch} title={'Click to see the next train'} position={[30, 0, 130]} />\n            <Button test={surpriseClick} title={'    Click for a surprise'} position={[30, 0, 160]} />\n\n\n        </Canvas>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}